# Configuration for Underwater Image Enhancement Model

# Model Configuration
model:
  type: "UNetAutoencoder"  # Model architecture type
  n_channels: 3  # Input channels (RGB)
  n_classes: 3   # Output channels (RGB)
  # Standard U-Net with full feature progression: 64 → 128 → 256 → 512 → 1024

# Data Configuration
data:
  input_dir: "dataset/input_GPR"
  target_dir: "dataset/human_output_JPEG"
  input_ext: ".GPR"
  target_ext: ".jpg"
  batch_size: 16  # Standard batch size for GPU training
  num_workers: 2  # Parallel data loading
  train_split: 0.8
  image_size: [256, 256]  # Balanced for quality and GPU memory

# Training Configuration
training:
  epochs: 50
  learning_rate: 0.0001
  lr_scheduler: "reduce_on_plateau"  # Reduces LR when validation loss plateaus
  optimizer: "adam"
  weight_decay: 0.0001
  gradient_clip: 1.0
  
  # Loss configuration (Combined L1 + MSE)
  loss:
    l1_weight: 0.8  # L1 loss for sharp details
    mse_weight: 0.2  # MSE loss for color consistency

# Validation Configuration
validation:
  interval: 5  # Validate every N epochs
  save_best: true
  metrics:
    - "psnr"
    - "ssim"
    - "mae"

# Checkpoint Configuration
checkpoint:
  save_dir: "checkpoints"
  save_interval: 10
  keep_last_n: 3

# Logging Configuration
logging:
  log_dir: "logs"
  tensorboard: true
  log_interval: 10  # Log every N batches

# Hardware Configuration
hardware:
  device: "cuda"  # Will auto-fallback to CPU if no GPU available
  mixed_precision: false  # Keep false for training stability
  cudnn_benchmark: true  # Optimize for consistent input sizes

# Inference Configuration
inference:
  checkpoint_path: null  # Path to checkpoint for inference
  output_dir: "output"
  batch_size: 1  # Process one image at a time for maximum quality
  maintain_original_size: true  # Resize to model size, then back to original