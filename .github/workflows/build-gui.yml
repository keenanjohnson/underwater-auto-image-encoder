name: Build GUI Application

on:
  push:
    branches: [ main, basic-gui ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write  # Required for creating/updating releases

jobs:
  build:
    strategy:
      matrix:
        # Windows build temporarily disabled - will be fixed in separate PR
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            binary_name: UnderwaterEnhancer
            gpr_binary: binaries/linux/gpr_tools
          - os: windows-latest
            platform: windows
            binary_name: UnderwaterEnhancer.exe
            gpr_binary: binaries/win32/gpr_tools.exe
          - os: macos-latest
            platform: macos
            binary_name: UnderwaterEnhancer.app
            gpr_binary: binaries/darwin/gpr_tools

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements_gui.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libgl1 \
          libglib2.0-0 \
          libsm6 \
          libxext6 \
          libxrender1 \
          libgomp1 \
          libgtk-3-0 \
          libgstreamer-gl1.0-0 \
          libgstreamer-plugins-base1.0-0 \
          libxcb-xinerama0 \
          libxkbcommon-x11-0

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Check if cmake is already available
        if ! command -v cmake &> /dev/null; then
          echo "Installing cmake..."
          brew install cmake
        else
          echo "cmake is already installed: $(cmake --version | head -1)"
        fi

    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # CMake is usually pre-installed, but install if missing
        if (!(Get-Command cmake -ErrorAction SilentlyContinue)) {
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
        } else {
          Write-Host "CMake already installed: $(cmake --version)"
        }
        # Install Ninja for faster builds
        choco install ninja -y

    - name: Set UTF-8 encoding for Windows
      if: matrix.os == 'windows-latest'
      run: |
        echo "PYTHONUTF8=1" >> $env:GITHUB_ENV
        echo "PYTHONIOENCODING=utf-8" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Verify build tools
      run: |
        echo "Checking build tools..."
        cmake --version || echo "cmake not found"
        python --version
        pip --version
    
    - name: Create requirements_gui.txt if not exists
      run: |
        python -c "
        import os
        if not os.path.exists('requirements_gui.txt'):
            requirements = '''# GUI Framework
        customtkinter>=5.2.0
        darkdetect>=0.8.0
        
        # Image Processing
        Pillow>=10.0.0
        opencv-python>=4.8.0
        scikit-image>=0.21.0
        rawpy>=0.18.0
        imageio>=2.31.0
        
        # ML Dependencies
        torch>=2.0.0
        torchvision>=0.15.0
        numpy>=1.24.0
        
        # Utilities
        PyYAML>=6.0
        tqdm>=4.65.0
        
        # Packaging
        pyinstaller>=6.0.0
        '''
            with open('requirements_gui.txt', 'w') as f:
                f.write(requirements)
        "

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install CPU-only PyTorch for smaller builds in CI
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements_gui.txt

    - name: Compile GPR tools (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        echo "Compiling GPR tools from source..."
        chmod +x build_scripts/compile_gpr_tools.sh
        ./build_scripts/compile_gpr_tools.sh
        if [ $? -ne 0 ]; then
          echo "FATAL: GPR tools compilation failed"
          exit 1
        fi
        
        # Verify binary exists and is valid
        if [ ! -f "${{ matrix.gpr_binary }}" ]; then
          echo "FATAL: GPR tools binary not found at expected location: ${{ matrix.gpr_binary }}"
          exit 1
        fi
        
        # Check file size to ensure it's not a placeholder
        SIZE=$(stat -f%z "${{ matrix.gpr_binary }}" 2>/dev/null || stat -c%s "${{ matrix.gpr_binary }}")
        if [ "$SIZE" -lt 10000 ]; then
          echo "FATAL: GPR tools binary is too small ($SIZE bytes) - likely corrupted or placeholder"
          exit 1
        fi
        
        echo "SUCCESS: GPR tools binary found and validated"
        ls -la "${{ matrix.gpr_binary }}"

    - name: Compile GPR tools (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo Compiling GPR tools from source...
        build_scripts\compile_gpr_tools.bat
        if %ERRORLEVEL% neq 0 (
          echo FATAL: GPR tools compilation failed with exit code %ERRORLEVEL%
          exit /b 1
        )
        
        REM Verify the binary exists and is valid
        if not exist "${{ matrix.gpr_binary }}" (
          echo FATAL: GPR tools binary not found at expected location: ${{ matrix.gpr_binary }}
          exit /b 1
        )
        
        REM Check file size to ensure it's not a placeholder
        for %%I in ("${{ matrix.gpr_binary }}") do set SIZE=%%~zI
        if %SIZE% LSS 10000 (
          echo FATAL: GPR tools binary is too small (%SIZE% bytes) - likely corrupted or placeholder
          exit /b 1
        )
        
        echo SUCCESS: GPR tools binary found and validated
        dir "${{ matrix.gpr_binary }}"

    - name: Create placeholder icons
      run: |
        python -c "
        from pathlib import Path
        import os
        
        # Create assets directory
        Path('assets').mkdir(exist_ok=True)
        
        # Create placeholder icon.png
        try:
            from PIL import Image, ImageDraw
            size = 256
            img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
            draw = ImageDraw.Draw(img)
            draw.ellipse([10, 10, size-10, size-10], fill=(30, 144, 255))
            img.save('assets/icon.png')
            print('Created icon.png')
            
            # Create ICO for Windows
            if '${{ matrix.os }}' == 'windows-latest':
                img.save('assets/icon.ico', format='ICO', sizes=[(256, 256)])
                print('Created icon.ico')
        except ImportError:
            print('PIL not available, skipping icon creation')
        "

    - name: Check source files before build
      run: |
        echo "Checking src directory structure:"
        python -c "import os; print('\n'.join(os.listdir('src')))"
        echo "Checking src/models:"
        python -c "import os; print('\n'.join(os.listdir('src/models')) if os.path.exists('src/models') else 'src/models does not exist!')"
        echo "Python files in src:"
        python -c "import os; [print(os.path.join(r, f)) for r, d, files in os.walk('src') for f in sorted(files) if f.endswith('.py')]"
    
    - name: Build with PyInstaller
      run: |
        pyinstaller pyinstaller.spec --clean --noconfirm
    
    - name: Fix macOS App Permissions
      if: matrix.os == 'macos-latest'
      run: |
        # Make the app executable and remove extended attributes
        chmod +x dist/UnderwaterEnhancer.app/Contents/MacOS/UnderwaterEnhancer
        # Remove quarantine attributes that might be added
        xattr -cr dist/UnderwaterEnhancer.app || true
        # Ad-hoc sign the app (allows it to run on the same machine and others with reduced security)
        codesign --force --deep --sign - dist/UnderwaterEnhancer.app
        echo "App has been ad-hoc signed"

    - name: List dist contents
      run: |
        python -c "
        import os
        for root, dirs, files in os.walk('dist'):
            level = root.replace('dist', '').count(os.sep)
            indent = ' ' * 2 * level
            print(f'{indent}{os.path.basename(root)}/')
            subindent = ' ' * 2 * (level + 1)
            for file in files[:10]:  # Limit to first 10 files
                print(f'{subindent}{file}')
        "

    - name: Test executable exists
      run: |
        python -c "
        import os
        import sys
        import platform
        
        # Use ASCII characters on Windows to avoid encoding issues
        check = '[OK]' if platform.system() == 'Windows' else '✓'
        cross = '[X]' if platform.system() == 'Windows' else '✗'
        
        expected_path = 'dist/${{ matrix.binary_name }}'
        if os.path.exists(expected_path):
            print(f'{check} Found {expected_path}')
            file_size = os.path.getsize(expected_path) if os.path.isfile(expected_path) else 0
            if file_size > 0:
                print(f'  Size: {file_size / 1024 / 1024:.2f} MB')
        else:
            print(f'{cross} Not found: {expected_path}')
            sys.exit(1)
        "

    - name: Smoke test - Test binary startup (Linux/Windows)
      if: matrix.os != 'macos-latest'
      run: |
        echo "Testing binary startup and imports..."
        
        # Run smoke test
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          dist/UnderwaterEnhancer.exe --smoke-test
        else
          dist/UnderwaterEnhancer --smoke-test
        fi
      shell: bash

    - name: Smoke test - Test macOS app bundle
      if: matrix.os == 'macos-latest'
      run: |
        echo "Testing macOS app bundle structure and startup..."
        
        # Check app bundle structure
        echo "Checking app bundle structure..."
        test -f dist/UnderwaterEnhancer.app/Contents/MacOS/UnderwaterEnhancer || (echo "Binary not found!" && exit 1)
        test -f dist/UnderwaterEnhancer.app/Contents/Info.plist || (echo "Info.plist not found!" && exit 1)
        echo "  [OK] App bundle structure valid"
        
        # Test binary can execute and import modules
        echo "Testing binary execution..."
        dist/UnderwaterEnhancer.app/Contents/MacOS/UnderwaterEnhancer --smoke-test

    - name: Create release archive (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd dist
        tar -czf "../UnderwaterEnhancer-${{ matrix.platform }}.tar.gz" *
        cd ..
    
    - name: Create release archive (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd dist
        # Create a DMG for better macOS distribution (optional, falls back to zip)
        if command -v hdiutil &> /dev/null; then
          hdiutil create -volname "UnderwaterEnhancer" -srcfolder "UnderwaterEnhancer.app" -ov -format UDZO "../UnderwaterEnhancer-${{ matrix.platform }}.dmg" || \
          zip -r "../UnderwaterEnhancer-${{ matrix.platform }}.zip" "UnderwaterEnhancer.app"
        else
          zip -r "../UnderwaterEnhancer-${{ matrix.platform }}.zip" "UnderwaterEnhancer.app"
        fi
        cd ..

    - name: Create release archive (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # For Windows, we'll upload the exe directly to avoid double-zipping
        # Just copy the exe to the root for consistent naming
        Copy-Item "dist\UnderwaterEnhancer.exe" -Destination "UnderwaterEnhancer-${{ matrix.platform }}.exe"

    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: UnderwaterEnhancer-${{ matrix.platform }}
        path: dist/*
        retention-days: 7
    
    - name: Upload artifacts (Linux/macOS)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: UnderwaterEnhancer-${{ matrix.platform }}
        path: |
          UnderwaterEnhancer-${{ matrix.platform }}.*
        retention-days: 7

    - name: Upload to Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          UnderwaterEnhancer-${{ matrix.platform }}.*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}